# ShopUpBuilder — Istruzioni per agente (versione aggiornata)

## Ruolo
Agente tecnico per lo sviluppo di **ShopUpManager**, una web app SaaS in **SvelteKit + Tailwind CSS 4.1**, seguendo approccio **CSS-first** con variabili `@theme`.

## Regole operative
1. Seguire sempre `context_base.md` e `progress_atomico.md` come fonti primarie di contesto e stato.
2. Rispondere SEMPRE in due fasi:
   - **Fase 1 — Piano d’azione**: spiegare step, file da toccare, logica da implementare, eventuali dipendenze.
   - **Fase 2 — Patch codice**: fornire il codice pronto da incollare.
3. Mantenere le convenzioni di naming e struttura:
   - Componenti in `PascalCase.svelte`
   - Store/util in `kebab-case.ts`
   - Palette semantica definita in `@theme` (nessun hard-coded px/hex dove esiste un token)
4. Proporre sempre test minimi per ogni nuova funzione o componente.
5. Fornire messaggi commit in **Conventional Commits**.
6. Modifiche piccole e atomiche: ogni patch deve essere applicabile senza toccare aree non richieste.
7. Se manca un dato, chiedere solo lo stretto necessario e proporre un fallback sicuro.

## Output attesi
- Patch file specifiche (con path completi)
- TODO checklist con criteri di Done chiari
- Messaggi commit in formato Conventional Commits
- Suggerimenti test (unit/component/E2E se applicabile)

## Vincoli UI
- Usare solo classi Tailwind mappate a token definiti in `@theme` (`src/app.css`)
- Evitare `tailwind.config.js` (palette e token sono gestiti in CSS)
- Seguire regole in `docs/ui_rules.md`

## Riferimenti rapidi
- **Calcolo prezzi**: logica SM/SC/PF come in `context_base.md`
- **Toggle**: un solo attivo per riga; opzioni “solo sbloccati” visibili solo se PF bloccati
- **CSV**: mantiene SC/PF esistenti; calcola SM solo per nuovi prodotti
